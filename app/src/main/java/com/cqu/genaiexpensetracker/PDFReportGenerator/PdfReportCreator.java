/**
 * PdfReportCreator.java
 *
 * Generates a well-styled financial report PDF using iText.
 * The report includes:
 * - Title and period
 * - Summary (income, expense, saving)
 * - Auto-generated donut-style pie chart with legend and percentage indicators
 * - Full-width divider line below chart
 * - AI-generated categorized insights
 * - Overall summary
 * - Footer displayed at the bottom center of the page using PdfPageEventHelper
 *
 */

package com.cqu.genaiexpensetracker.PDFReportGenerator;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.RectF;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfPageEventHelper;
import com.itextpdf.text.pdf.PdfWriter;

import org.json.JSONArray;
import org.json.JSONObject;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Map;

public class PdfReportCreator {

    /**
     * FooterHandler ensures the footer appears at the center bottom of every page.
     */
    static class FooterHandler extends PdfPageEventHelper {
        Font footerFont = FontFactory.getFont(FontFactory.HELVETICA, 8, BaseColor.GRAY);

        @Override
        public void onEndPage(PdfWriter writer, Document document) {
            Rectangle pageSize = document.getPageSize();
            ColumnText.showTextAligned(
                    writer.getDirectContent(),
                    Element.ALIGN_CENTER,
                    new Phrase("PDF generated by Â© 2025 GenAI Expense Tracker. All rights reserved.", footerFont),
                    (pageSize.getLeft() + pageSize.getRight()) / 2,
                    pageSize.getBottom() + 15,
                    0
            );
        }
    }

    /**
     * Generates the complete financial PDF report.
     *
     * @param context          Application context for bitmap operations
     * @param outputFile       File to write the PDF to
     * @param insights         JSONArray containing AI-generated insights
     * @param period           The report period string
     * @param income           Total income
     * @param expense          Total expenses
     * @param saving           Calculated savings
     * @param categoryTotals   Map of expense category and corresponding amounts
     */
    public static void generateReport(Context context,
                                      File outputFile,
                                      JSONArray insights,
                                      String period,
                                      double income,
                                      double expense,
                                      double saving,
                                      Map<String, Double> categoryTotals) {
        try {
            Document document = new Document();
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(outputFile));
            writer.setPageEvent(new FooterHandler());
            document.open();

            DecimalFormat df = new DecimalFormat("0.00");

            Font titleFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 16, BaseColor.BLACK);
            Font periodFont = FontFactory.getFont(FontFactory.HELVETICA, 12, BaseColor.BLACK);
            Font labelFont = FontFactory.getFont(FontFactory.HELVETICA, 10, BaseColor.DARK_GRAY);
            Font sectionFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 14, new BaseColor(27, 0, 77));
            Font subheadingFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11, new BaseColor(0xd8, 0x34, 0x0e));
            Font bodyFont = FontFactory.getFont(FontFactory.HELVETICA, 10, BaseColor.BLACK);

            document.add(new Paragraph("GenAI Expense Report", titleFont));
            document.add(new Paragraph("\nPeriod: " + period, periodFont));
            document.add(new Paragraph("\nSummary", labelFont));
            document.add(new Paragraph("    Income - $" + df.format(income), bodyFont));
            document.add(new Paragraph("    Expense - $" + df.format(expense), bodyFont));
            document.add(new Paragraph("    Saving   - $" + df.format(saving), bodyFont));

            // Chart
            Image chartImage = generatePieChartImage(context, categoryTotals);
            // Add chart to document
            if (chartImage != null) {
                chartImage.scaleToFit(400, 400);
                chartImage.setAlignment(Image.ALIGN_CENTER);
                document.add(chartImage);

                // Immediately after adding the chart, draw the divider
                PdfContentByte canvasLine = writer.getDirectContent();
                canvasLine.setLineWidth(1f);
                canvasLine.setGrayStroke(0.6f);

                float y = writer.getVerticalPosition(true) - 10; // get Y position after chart
                canvasLine.moveTo(document.left(), y);
                canvasLine.lineTo(document.right(), y);
                canvasLine.stroke();
            }

            document.add(new Paragraph("\nAI-Based Financial Overview", sectionFont));
            String currentCategory = "";
            for (int i = 0; i < insights.length(); i++) {
                JSONObject obj = insights.getJSONObject(i);
                String category = obj.optString("category", "General Insight");
                String text = obj.optString("text", "");

                if (!category.equals(currentCategory)) {
                    document.add(new Paragraph("\n" + category, subheadingFont));
                    currentCategory = category;
                }
                document.add(new Paragraph(text, bodyFont));
            }

            document.add(new Paragraph("\n\nSummary", sectionFont));
            String summary = "This month, your spending was " +
                    (saving >= 0 ? "well within your income, resulting in positive savings of $" + df.format(saving) :
                            "above your income, resulting in a negative balance of $" + df.format(Math.abs(saving))) + ". " +
                    "However, increased costs in food and transportation suggest an opportunity to refine your budget. " +
                    "Regularly tracking essentials and minimizing non-critical travel can help you boost savings further.";
            document.add(new Paragraph(summary, bodyFont));

            document.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Draws the donut-style pie chart with labeled percentages and legend.
     *
     * @param context          Context to support image generation
     * @param categoryTotals   Expense categories and their values
     * @return                 Image instance containing the chart
     */
    private static Image generatePieChartImage(Context context, Map<String, Double> categoryTotals) {
        try {
            int width = 1200, height = 700;
            Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
            Canvas canvas = new Canvas(bitmap);
            canvas.drawColor(Color.WHITE);

            Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            Paint textPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
            textPaint.setColor(Color.BLACK);
            textPaint.setTextSize(28f);

            Paint linePaint = new Paint(Paint.ANTI_ALIAS_FLAG);
            linePaint.setColor(Color.GRAY);
            linePaint.setStrokeWidth(2f);

            // Title
            textPaint.setTextSize(34f);
            textPaint.setFakeBoldText(true);
            String title = "Monthly Expense Distribution";
            float titleWidth = textPaint.measureText(title);
            canvas.drawText(title, (width - titleWidth) / 2, 60, textPaint);
            textPaint.setFakeBoldText(false);
            textPaint.setTextSize(28f);

            // Pie setup
            int pieSize = 400;
            int pieCenterX = 300, pieCenterY = 330;
            RectF pieBounds = new RectF(pieCenterX - pieSize / 2f, pieCenterY - pieSize / 2f,
                    pieCenterX + pieSize / 2f, pieCenterY + pieSize / 2f);

            float holeRadius = pieSize * 0.4f;
            double total = 0;
            for (double v : categoryTotals.values()) total += v;

            Map<String, Integer> colorMap = new HashMap<>();
            colorMap.put("grocery", Color.rgb(208, 119, 208));
            colorMap.put("food", Color.rgb(255, 167, 38));
            colorMap.put("rent", Color.rgb(103, 142, 73));
            colorMap.put("transport", Color.rgb(255, 87, 34));

            float startAngle = 0;
            DecimalFormat df = new DecimalFormat("0.0");

            // Legend box
            int legendLeft = 850;
            int legendTop = (height / 2) - (categoryTotals.size() * 30);
            int legendBoxSize = 30, legendSpacing = 50;
            int legendWidth = 340, legendHeight = categoryTotals.size() * legendSpacing + 40;
            Paint legendBorder = new Paint();
            legendBorder.setColor(Color.BLACK);
            legendBorder.setStyle(Paint.Style.STROKE);
            legendBorder.setStrokeWidth(2f);
            canvas.drawRect(legendLeft - 20, legendTop - 30, legendLeft + legendWidth - 20, legendTop + legendHeight, legendBorder);

            int legendY = legendTop;
            for (Map.Entry<String, Double> entry : categoryTotals.entrySet()) {
                String category = capitalize(entry.getKey());
                double value = entry.getValue();
                float sweepAngle = (float) (value / total * 360);
                float midAngle = startAngle + sweepAngle / 2;

                int color = colorMap.getOrDefault(entry.getKey().toLowerCase(), Color.LTGRAY);
                paint.setColor(color);
                paint.setStyle(Paint.Style.FILL);
                canvas.drawArc(pieBounds, startAngle, sweepAngle, true, paint);

                // Lines and labels
                double angleRad = Math.toRadians(midAngle);
                float startX = pieCenterX + (float) Math.cos(angleRad) * (pieSize / 2f) * 0.8f;
                float startY = pieCenterY + (float) Math.sin(angleRad) * (pieSize / 2f) * 0.8f;
                float endX = pieCenterX + (float) Math.cos(angleRad) * (pieSize / 2f + 55);
                float endY = pieCenterY + (float) Math.sin(angleRad) * (pieSize / 2f + 55);
                canvas.drawLine(startX, startY, endX, endY, linePaint);
                String percentLabel = df.format((value / total) * 100) + "%";
                canvas.drawText(percentLabel, endX + 15, endY + 5, textPaint);

                // Legend
                canvas.drawRect(legendLeft, legendY, legendLeft + legendBoxSize, legendY + legendBoxSize, paint);
                canvas.drawText(category + " - $" + df.format(value),
                        legendLeft + legendBoxSize + 20, legendY + legendBoxSize - 5, textPaint);
                legendY += legendSpacing;
                startAngle += sweepAngle;
            }

            // Donut hole
            paint.setColor(Color.WHITE);
            canvas.drawCircle(pieCenterX, pieCenterY, holeRadius, paint);

            ByteArrayOutputStream stream = new ByteArrayOutputStream();
            bitmap.compress(Bitmap.CompressFormat.PNG, 100, stream);
            return Image.getInstance(stream.toByteArray());
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * Capitalizes the first character of a string.
     */
    private static String capitalize(String s) {
        return s == null || s.isEmpty() ? "" : Character.toUpperCase(s.charAt(0)) + s.substring(1);
    }
}